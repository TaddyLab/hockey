
R version 2.15.2 Patched (--) -- "Trick or Treat"
Copyright (C)  The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("args.R")
> 
> ## load the roster object containing player/game info
> load("../data/roster.RData")
> 
> game.goals <- function(file, session)
+   {
+   	## make sure the file exists
+   	if(!file.exists(file)) return(NULL)
+ 
+ 	## first read game file
+ 	game <- read.csv(file, sep="|", comment="", quote="")
+ 
+ 	## get goals
+ 	goals <- game[which(game$etype == "GOAL"),]
+ 
+ 	## remove <= period 4 for regular season games
+ 	if(session == "Regular")
+ 		goals <- goals[goals$period <= 4,]
+ 
+ 	## check to make sure there were any goals in regulation time
+ 	if(nrow(goals) == 0) return(NULL)
+ 
+ 	## check for even strength and goalie-in-net
+ 	## 8:12 is a1:a5, 14:18 is h1:h5
+ 	# even <- goals[,8:12] != 1 & goals[,14:18] != 1 
+ 	# gin <- goals$a6 == 1 & goals$h6 == 1 & goals$away.G != 1 & goals$home.G != 1
+ 	# w <- which(apply(cbind(even, gin), 1, function(x) { all(x) }))
+ 	# eg <- goals[w,]
+ 
+ 	## instead check to make sure there are skaters on the ice
+ 	## (i.e., not shootout or penalty shot)
+ 	shootout <- goals[,c(8:12,14:18)] != 1 
+ 	w <- which(apply(shootout, 1, function(x) { sum(x) > 6 }))
+ 	eg <- goals[w,]
+ 
+ 	## remove un-needed columns
+ 	eg <- eg[,-c(3,7,21:28,33)]
+ 
+ 	## replace ev.team with home or away goal scoring team
+ 	eg$ev.team <- as.character(eg$ev.team)
+ 	eg$awayteam <- as.character(eg$awayteam)
+ 	eg$hometeam <- as.character(eg$hometeam)
+ 	g <- rep(NA, nrow(eg))
+ 	g[eg$ev.team == eg$awayteam] <- "AWAY"
+ 	g[is.na(g)] <- "HOME"
+ 	session <- rep(session, nrow(eg))  ##Â also add session variable
+ 	eg <- cbind(eg, g, session) 
+ 	eg$ev.team <- NULL
+ 
+ 	## return the result
+ 	return(eg)
+ }
>   
> ## extract games, and prefix for location of files
> G <- roster$games
> 
> ## empty games data structure
> games <- list()
> 
> ## loop over games
> for(i in 1:nrow(G)) {
+ 
+ 	## next if not valid or regular season
+ 	if(! (G[i,]$valid)) { games[[i]] <- NULL; next }
+ 
+ 	## construct the filke
+ 	file <- sprintf("%s/%s-%s-gamerec.txt", EXT, G$season[i], G$gcode[i])
+ 
+ 	## get the game
+ 	games[[i]] <- game.goals(file, G[i,]$session)
+ 
+ 	## progress meter
+ 	if(i %% 100 == 0) 
+ 		cat(i, " of ", nrow(G), " games processed\n", sep="")
+ }
100 of 12685 games processed
200 of 12685 games processed
300 of 12685 games processed
400 of 12685 games processed
500 of 12685 games processed
600 of 12685 games processed
700 of 12685 games processed
800 of 12685 games processed
900 of 12685 games processed
1000 of 12685 games processed
1100 of 12685 games processed
1200 of 12685 games processed
1300 of 12685 games processed
1400 of 12685 games processed
1500 of 12685 games processed
1600 of 12685 games processed
1700 of 12685 games processed
1800 of 12685 games processed
1900 of 12685 games processed
2000 of 12685 games processed
2100 of 12685 games processed
2200 of 12685 games processed
2300 of 12685 games processed
2400 of 12685 games processed
2500 of 12685 games processed
2600 of 12685 games processed
2700 of 12685 games processed
2800 of 12685 games processed
2900 of 12685 games processed
3000 of 12685 games processed
3100 of 12685 games processed
3200 of 12685 games processed
3300 of 12685 games processed
3400 of 12685 games processed
3500 of 12685 games processed
3600 of 12685 games processed
3700 of 12685 games processed
3800 of 12685 games processed
3900 of 12685 games processed
4000 of 12685 games processed
4100 of 12685 games processed
4200 of 12685 games processed
4300 of 12685 games processed
4400 of 12685 games processed
4500 of 12685 games processed
4600 of 12685 games processed
4700 of 12685 games processed
4800 of 12685 games processed
4900 of 12685 games processed
5000 of 12685 games processed
5100 of 12685 games processed
5200 of 12685 games processed
5300 of 12685 games processed
5400 of 12685 games processed
5500 of 12685 games processed
5600 of 12685 games processed
5700 of 12685 games processed
5800 of 12685 games processed
5900 of 12685 games processed
6000 of 12685 games processed
6100 of 12685 games processed
6200 of 12685 games processed
6300 of 12685 games processed
6400 of 12685 games processed
6500 of 12685 games processed
6600 of 12685 games processed
6700 of 12685 games processed
6800 of 12685 games processed
6900 of 12685 games processed
7000 of 12685 games processed
7100 of 12685 games processed
7200 of 12685 games processed
7300 of 12685 games processed
7400 of 12685 games processed
7500 of 12685 games processed
7600 of 12685 games processed
7700 of 12685 games processed
7800 of 12685 games processed
7900 of 12685 games processed
8000 of 12685 games processed
8100 of 12685 games processed
8200 of 12685 games processed
8300 of 12685 games processed
8400 of 12685 games processed
8500 of 12685 games processed
8600 of 12685 games processed
8700 of 12685 games processed
8800 of 12685 games processed
8900 of 12685 games processed
9000 of 12685 games processed
9100 of 12685 games processed
9200 of 12685 games processed
9300 of 12685 games processed
9400 of 12685 games processed
9500 of 12685 games processed
9600 of 12685 games processed
9700 of 12685 games processed
9800 of 12685 games processed
9900 of 12685 games processed
10000 of 12685 games processed
10100 of 12685 games processed
10200 of 12685 games processed
10300 of 12685 games processed
10400 of 12685 games processed
10500 of 12685 games processed
10600 of 12685 games processed
10700 of 12685 games processed
10800 of 12685 games processed
10900 of 12685 games processed
11000 of 12685 games processed
11100 of 12685 games processed
11200 of 12685 games processed
11300 of 12685 games processed
11400 of 12685 games processed
11500 of 12685 games processed
11600 of 12685 games processed
11700 of 12685 games processed
11800 of 12685 games processed
11900 of 12685 games processed
12000 of 12685 games processed
12100 of 12685 games processed
12200 of 12685 games processed
12300 of 12685 games processed
12400 of 12685 games processed
12500 of 12685 games processed
12600 of 12685 games processed
> 
> ## collapse list of data frames into one data frames
> goals <- do.call("rbind", games)
> 
> ## deal with types of columsn
> goals$g <- as.factor(goals$g)
> goals$hometeam <- as.factor(goals$hometeam)
> goals$awayteam <- as.factor(goals$awayteam)
> 
> ## save to file
> save(goals, file="../data/nhlscrapr_goals.RData")
> 
> ## now build design matrix and response -- 
> ## this comes from the newdata.R script
> 
> ## goal indicator(s)
> Y <- goals$g == "HOME"
> 
> ## home and away team indicators
> TA <- as.numeric(goals$awayteam)
> TH <- as.numeric(goals$hometeam)
> 
> ## create unique names --
> ## this is overkill given the new roster structure
> uID <- 1:nrow(roster$unique.list)
> uN <- paste(roster$unique.list$first, roster$unique.list$last, sep="_")
> positions <- uniqueNames <- rep(NA, length(unique(uID)))
> uniqueNames[uID] <- uN
> positions[uID] <- roster$unique.list$pos
> 
> ## home and away player indicators
> PA <- as.matrix(goals[,c(6:11,22)])
> PA[PA == 1] <- NA
> PH <- as.matrix(goals[,c(12:17,23)])
> PH[PH == 1] <- NA
> 
> ## build design matrix and make Plus-minus comparison
> nplayers <- nrow(roster$unique.list)
> T <- nrow(PH)
> ## players the design matrix
> XP <- matrix(0, ncol=nplayers, nrow=T)
> colnames(XP) <- paste("P", 1:nplayers, sep="")
> 
> ## teams design matrix
> nteams <- max(TH)
> XT <- matrix(0, ncol=nteams, nrow=T)
> colnames(XT) <- paste("T", 1:nteams, sep="")
> ## plus-minus calculation
> Ppm <- rep(0, ncol(XP)) ## players
> Tpm <- rep(0, ncol(XT))
> 
> ## special teams design matrix
> XS <- matrix(0, ncol=7, nrow=T)
> colnames(XS) <- c("S6v5", "S6v4", "S6v3", "S5v4", "S5v3", "S4v3", "SNG")
> XS <- as.data.frame(XS)
> 
> ## build the matrices and plus-minus
> for(t in 1:T) {
+ 
+   ## design matrix for teams and players	
+   pht <- PH[t,!is.na(PH[t,])]
+   pat <- PA[t,!is.na(PA[t,])]
+   XT[t, TH[t]] <- XP[t, pht] <- 1
+   XT[t, TA[t]] <- XP[t, pat] <- -1
+ 
+   ## design matrix for special teams
+   spht <- sum(!is.na(PH[t,1:6]))
+   spat <- sum(!is.na(PA[t,1:6]))
+   if(spht == 6) {
+   	if(spat == 5) XS[t,]$S6v5 <- 1
+   	else if(spat == 4) XS[t,]$S6v4 <- 1
+   	else if(spat == 3) XS[t,]$S6v3 <- 1
+   } else if(spht == 5) {
+   	if(spat == 6) XS[t,]$S6v5 <- -1
+     else if(spat == 4) XS[t,]$S5v4 <- 1
+     else if(spat == 3) XS[t,]$S5v3 <- 1
+   } else if(spht == 4) {
+   	if(spat == 3) XS[t,]$S4v3 <- 1
+   	else if(spat == 5) XS[t,]$S5v4 <- -1
+   	else if(spat == 6) XS[t,]$S6v4 <- -1
+   } else if(spht == 3) {
+   	if(spat == 4) XS[t,]$S4v3 <- -1
+   	else if(spat == 5) XS[t,]$S5v3 <- -1
+   	else if(spat == 6) XS[t,]$S6v3 <- -1
+   }
+ 
+   ## checking for pulled-goalie situation at the end of the game
+   if(goals[t,]$session == "Regular" 
+   	&& goals[t,]$period == 3 && goals[t,]$seconds > 3480) {
+     	if(is.na(PH[t,7]) && (goals[t,]$home.score < goals[t,]$away.score)) XS[t,]$SNG <- 1
+     	if(is.na(PA[t,7]) && (goals[t,]$home.score > goals[t,]$away.score)) XS[t,]$SNG <- -1
+   }
+ 
+   ## plus-minus
+   if(Y[t]) { ## home goal
+     Ppm[pht] <- Ppm[pht] + 1
+     Ppm[pat] <- Ppm[pat] - 1
+     Tpm[TH[t]] <- Tpm[TH[t]] + 1
+     Tpm[TA[t]] <- Tpm[TA[t]] - 1
+   } else {
+     Ppm[pht] <- Ppm[pht] - 1
+     Ppm[pat] <- Ppm[pat] + 1
+     Tpm[TH[t]] <- Tpm[TH[t]] - 1
+     Tpm[TA[t]] <- Tpm[TA[t]] + 1
+   }
+ 
+   ## progress meter
+   if(t %% 1000 == 0) 
+ 	cat(t, " of ", T, " goals processed\n", sep="")
+ }
1000 of 64434 goals processed
2000 of 64434 goals processed
3000 of 64434 goals processed
4000 of 64434 goals processed
5000 of 64434 goals processed
6000 of 64434 goals processed
7000 of 64434 goals processed
8000 of 64434 goals processed
9000 of 64434 goals processed
10000 of 64434 goals processed
11000 of 64434 goals processed
12000 of 64434 goals processed
13000 of 64434 goals processed
14000 of 64434 goals processed
15000 of 64434 goals processed
16000 of 64434 goals processed
17000 of 64434 goals processed
18000 of 64434 goals processed
19000 of 64434 goals processed
20000 of 64434 goals processed
21000 of 64434 goals processed
22000 of 64434 goals processed
23000 of 64434 goals processed
24000 of 64434 goals processed
25000 of 64434 goals processed
26000 of 64434 goals processed
27000 of 64434 goals processed
28000 of 64434 goals processed
29000 of 64434 goals processed
30000 of 64434 goals processed
31000 of 64434 goals processed
32000 of 64434 goals processed
33000 of 64434 goals processed
34000 of 64434 goals processed
35000 of 64434 goals processed
36000 of 64434 goals processed
37000 of 64434 goals processed
38000 of 64434 goals processed
39000 of 64434 goals processed
40000 of 64434 goals processed
41000 of 64434 goals processed
42000 of 64434 goals processed
43000 of 64434 goals processed
44000 of 64434 goals processed
45000 of 64434 goals processed
46000 of 64434 goals processed
47000 of 64434 goals processed
48000 of 64434 goals processed
49000 of 64434 goals processed
50000 of 64434 goals processed
51000 of 64434 goals processed
52000 of 64434 goals processed
53000 of 64434 goals processed
54000 of 64434 goals processed
55000 of 64434 goals processed
56000 of 64434 goals processed
57000 of 64434 goals processed
58000 of 64434 goals processed
59000 of 64434 goals processed
60000 of 64434 goals processed
61000 of 64434 goals processed
62000 of 64434 goals processed
63000 of 64434 goals processed
64000 of 64434 goals processed
> 
> ##Â back to matrix
> XS <- as.matrix(XS)
> 
> ## see which cols are all the same, and remove from df
> same <- which(apply(XP, 2, var) == 0)
> XP <- XP[,-same]
> uN2 <- uniqueNames[-same]
> pos2 <- positions[-same]
> Ppm <- Ppm[-same]
> 
> ## sanity check
> if(any(apply(XT, 2, var) == 0)) error("some teams never play?")
> 
> ## design matrix containing game info
> XG <- matrix(0, ncol=6, nrow=T)
> colnames(XG) <- c("Hscore", "Ascore", "Session", "Season", "GameCode", "Seconds")
> XG[,1] <- goals$home.score
> XG[,2] <- goals$away.score
> XG[,3] <- goals$session
> XG[,4] <- goals$season
> XG[,5] <- goals$gcode
> XG[,6] <- goals$seconds
> 
> ## build data frame
> save(uN2, goals, Y, XP, XT, Ppm, Tpm, pos2,
+      XS, XG, file="../data/nhlscrapr_logit_data.RData")
> 
> ## extra cleaning and output for gamlr
> library(Matrix, lib=LIB)
Loading required package: lattice
> player <- Matrix(XP,sparse=TRUE)
> colnames(player) <- uN2
> onice <- Matrix(XS,sparse=TRUE)
> goal <- data.frame(whoscored=goals$g,
+       season=goals$season, 
+       team.away=goals$awayteam,
+       team.home=goals$hometeam,
+       period=goals$period,
+       differential=goals$home.score-goals$away.score,
+       session=goals$session,
+       gamecode=goals$gcode)
> rownames(player) <- rownames(goal) <- rownames(onice) <- 1:nrow(player)
> save(goal,player,onice,compress="xz",file="../data/hockey.rda")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
344.384   9.849 462.247 
